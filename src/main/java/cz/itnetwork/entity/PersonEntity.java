/*  _____ _______         _                      _
 * |_   _|__   __|       | |                    | |
 *   | |    | |_ __   ___| |___      _____  _ __| | __  ___ ____
 *   | |    | | '_ \ / _ \ __\ \ /\ / / _ \| '__| |/ / / __|_  /
 *  _| |_   | | | | |  __/ |_ \ V  V / (_) | |  |   < | (__ / /
 * |_____|  |_|_| |_|\___|\__| \_/\_/ \___/|_|  |_|\_(_)___/___|
 *                                _
 *              ___ ___ ___ _____|_|_ _ _____
 *             | . |  _| -_|     | | | |     |  LICENCE
 *             |  _|_| |___|_|_|_|_|___|_|_|_|
 *             |_|
 *
 *   PROGRAMOVÁNÍ  <>  DESIGN  <>  PRÁCE/PODNIKÁNÍ  <>  HW A SW
 *
 * Tento zdrojový kód je součástí výukových seriálů na
 * IT sociální síti WWW.ITNETWORK.CZ
 *
 * Kód spadá pod licenci prémiového obsahu a vznikl díky podpoře
 * našich členů. Je určen pouze pro osobní užití a nesmí být šířen.
 * Více informací na http://www.itnetwork.cz/licence
 */
package cz.itnetwork.entity;

import cz.itnetwork.constant.Countries;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import java.util.List;

/**
 * <p>This class represents a database entity (named: person) for a person/company</p>
 * <p>Getters, setters generated with lombok</p>
 *
 * @author Kat
 */
@Entity(name = "person")
@Getter
@Setter
public class PersonEntity {

    /**
     * <p>Represents the id of a person/company</p>
     * <p>Generated by the database</p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    /**
     * <p>Represents the name of a person/company</p>
     * <p>Cannot be null</p>
     */
    @Column(nullable = false)
    private String name;

    /**
     * <p>Represents the identification number of a person/company (IČO in Czechia)</p>
     * <p>Cannot be null</p>
     */
    @Column(nullable = false)
    private String identificationNumber;

    /**
     * <p>Represents the tax number of a person/company (DIČ in Czechia)</p>
     * <p>Cannot be null</p>
     */
    @Column(nullable = false)
    private String taxNumber;

    /**
     * <p>Represents the account number of a person/company</p>
     * <p>Cannot be null</p>
     */
    @Column(nullable = false)
    private String accountNumber;

    /**
     * <p>Represents the person's/company's bank code</p>
     * <p>Cannot be null</p>
     */
    @Column(nullable = false)
    private String bankCode;

    /**
     * <p>Represents the International Bank Account Number of a person/company</p>
     * <p>Cannot be null</p>
     */
    @Column(nullable = false)
    private String iban;

    /**
     * <p>Represents the telephone number of a person/company</p>
     * <p>Cannot be null</p>
     */
    @Column(nullable = false)
    private String telephone;

    /**
     * <p>Represents the person's/company's e-mail</p>
     * <p>Cannot be null</p>
     */
    @Column(nullable = false)
    private String mail;

    /**
     * <p>Represents the street, that the headquarters of a person/company is located on</p>
     * <p>Cannot be null</p>
     */
    @Column(nullable = false)
    private String street;

    /**
     * <p>Represents the zip code of a city, where the headquarters of a person/company is located</p>
     * <p>Cannot be null</p>
     */
    @Column(nullable = false)
    private String zip;

    /**
     * <p>Represents the city, where the headquarters of a person/company is located</p>
     * <p>Cannot be null</p>
     */
    @Column(nullable = false)
    private String city;

    /**
     * <p>Represents the country, where the headquarters of a person/company is located</p>
     * <p>Chosen from enum {@link Countries}</p>
     * <p>Cannot be null</p>
     */
    @Column(nullable = false)
    @Enumerated(EnumType.STRING)
    private Countries country;

    /**
     * Represents a note for a person/company
     * <p>Cannot be null</p>
     */
    @Column(columnDefinition = "TEXT", nullable = false)
    private String note;

    /**
     * Represents if a person/company was "deleted"
     */
    private boolean hidden = false;

    /**
     * <p>Represents the purchases of a person/company</p>
     * <p>Has a OneToMany association to person/company (one person/company can buy many products {@link InvoiceEntity}</p>
     * <p>Cannot be null</p>
     */
    @OneToMany(mappedBy = "buyer")
    private List<InvoiceEntity> purchases;

    /**
     * <p>Represents the sales of a person/company</p>
     * <p>Has a OneToMany association to person/company (one person/company can sell many products {@link InvoiceEntity})</p>
     * <p>Cannot be null</p>
     */
    @OneToMany(mappedBy = "seller")
    private List<InvoiceEntity> sales;
}
