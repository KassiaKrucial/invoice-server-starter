/*  _____ _______         _                      _
 * |_   _|__   __|       | |                    | |
 *   | |    | |_ __   ___| |___      _____  _ __| | __  ___ ____
 *   | |    | | '_ \ / _ \ __\ \ /\ / / _ \| '__| |/ / / __|_  /
 *  _| |_   | | | | |  __/ |_ \ V  V / (_) | |  |   < | (__ / /
 * |_____|  |_|_| |_|\___|\__| \_/\_/ \___/|_|  |_|\_(_)___/___|
 *                                _
 *              ___ ___ ___ _____|_|_ _ _____
 *             | . |  _| -_|     | | | |     |  LICENCE
 *             |  _|_| |___|_|_|_|_|___|_|_|_|
 *             |_|
 *
 *   PROGRAMOVÁNÍ  <>  DESIGN  <>  PRÁCE/PODNIKÁNÍ  <>  HW A SW
 *
 * Tento zdrojový kód je součástí výukových seriálů na
 * IT sociální síti WWW.ITNETWORK.CZ
 *
 * Kód spadá pod licenci prémiového obsahu a vznikl díky podpoře
 * našich členů. Je určen pouze pro osobní užití a nesmí být šířen.
 * Více informací na http://www.itnetwork.cz/licence
 */
package cz.itnetwork.controller;

import cz.itnetwork.dto.InvoiceDTO;
import cz.itnetwork.dto.PersonDTO;
import cz.itnetwork.service.PersonService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

/**
 * This rest controller catches http requests to url addresses starting on `/api`
 *
 * @author ITnetwork.cz
 * @author The auther of Javadoc for this class is Kat
 */
@RestController
@RequestMapping("/api")
public class PersonController {

    /**
     * Represents an autowired bean of {@link PersonService} need
     */
    @Autowired
    private PersonService personService;

    /**
     * <p>Sends data for creating a person/company</p>
     * <p>Catches http POST method to url ending with `/persons`</p>
     * @param personDTO the DTO that the transferred data is mapped to
     * @return the saved data (with id generated by database) as a {@link PersonDTO}
     */
    @PostMapping("/persons")
    public PersonDTO addPerson(@RequestBody PersonDTO personDTO) {
        return  personService.addPerson(personDTO);
    }

    /**
     * <p>Shows a list of all people/companies saved in the database</p>
     * <p>Catches http method GET to url ending with `/persons`</p>
     * @return list of all people/companies as {@link InvoiceDTO}
     */
    @GetMapping("/persons")
    public List<PersonDTO> getPersons() {
        return personService.getAll();
    }


    /**
     * <p>Sends the id of a person/company to be deleted</p>
     * <p>Catches http DELETE method to url ending with `/persons/{personId}`</p>
     * @param personId the id of a person/company to be deleted
     * returns http status 204 - no content
     */
    @DeleteMapping("/persons/{personId}")
    public void deletePerson(@PathVariable Long personId) {
        personService.removePerson(personId);
    }

    /**
     * <p>Shows the detail of a person/company</p>
     * <p>Catches http GET method to url ending with `/persons/{personId}`</p>
     * @param personId the id of the person/company user wants to see
     * @return chosen person/company as {@link PersonDTO}
     */
    @GetMapping("/persons/{personId}")
    public PersonDTO getPerson(@PathVariable Long personId) {
        return personService.getPersonById(personId);
    }

    /**
     * <p>Sends data to update an existing Person/company</p>
     * <p>Catches http PUT method to url ending with `/persons/{personId}`</p>
     * @param personId the id of a person/company user wants to change
     * @param personDTO contains new data for the person/company info user wants to update
     * @return the updated person/company data as {@link PersonDTO}
     */
    @PutMapping("/persons/{personId}")
    public PersonDTO updatePerson(@PathVariable Long personId,
                                  @RequestBody PersonDTO personDTO) {
        return personService.updatePerson(personId, personDTO);
    }
}

